тестовое задание MS SQL

для условной системы расчета есть следующие объекты:

1. точка учета (ТУ) с атрибутами

а) [идентификатор]
б) [код]
в) [наименование]

2. активность ТУ с атрибутами

а) [идентификатор ТУ]
б) [дата] - дата изменения активности
в) [коэф.активности] - имеет два значения 0 - ТУ не активна (выключена), 1 - ТУ активна (включена)

3. элементы сети с атрибутами

а) [идентификатор]
б) [код]
в) [наименование]

4. активность сети с атрибутами

а) [идентификатор элемента сети]
б) [дата] - дата изменения активности
в) [коэф.активности] - имеет два значения 0 - элемент сети не активен (выключен), 1 - элемент сети активен (включен)

5. подключение ТУ к элементам сети с атрибутами (связь один к одному)

а) [идентификатор ТУ]
б) [идентификатор элемента сети]

Состояние предоставления услуги определяется активностью ТУ и активностью элемента сети, к которому подключена ТУ. 
Для предоставления услуги ТУ и элемент сети должны быть активны (активность = 1).

Активности ТУ и сети могут иметь несколько записей на одну дату, если на одну дату есть несколько записей активности с разными 
коэф. то считается достоверной запись идущая первая по порядку. 

*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* Что является критерием порядка? Порядок по моменту создания записей в таблице? Предложенная структура таблиц активности
* не подходит для однозначной и гарантированной реализации этого условия при каждой повторной выборке.
* 
* Для реализации этого условия должен быть, например, искусственный целочисленный автоинкрементируемый первичный ключ в таблицах 
* активности, т.к. порядок выборки записей сервером, в общем случае, неопределён, и может быть произвольным каждый раз, если не задан
* явно через предложение ORDER BY запроса. И даже если он задан не стоит полагаться на то, что, при одинаковом значении в поле(-ях)
* сортировки, в разных строках, эти строки будут возвращены в порядке их создания, реальный порядок будет зависеть от особенностей 
* реализации реляционного движка СУБД, от решений которые примет оптимизатор при построеннии плана запроса и трансляции его в 
* процедурный вид, и помимо того, поведение может зависить от его версии даже если используется одна и таже СУБД. 
* Это основное следствие того что таблицы базы данных всё же являются неупорядоченными множествами с точки зрения реляционной теории 
* данных, и именно в таком значении используются при интерпретации запросов на SQL. Хотя, конечно, физически на диске это таблица и 
* в ней присутствует какой-то порядок, но мы никак не может быть уверенными, что порядок именно тот, что нам нужен, и, что именно в 
* этом порядке будут возвращены записе в результирующем наборе данных запроса. Единственный способ, всегда, для одного и того же набора 
* полей и записей, получить данные упорядоченные одинаково, это уникальность комбинаций значений полей указанных в ORDER BY для
* разных записей, иначе это остается на усмотрение оптимизатора, т.к. сортировка достаточно накладная операция, её надо запрашивать
* явно.
* 
* MSSQL однако имеет кластеризованные индексы, использование которых по заявлению разработчиков СУБД, приводит к тому, что данные 
* физически на диске хранятся в порядке задаваемом проиндексированными полями, и логично, что вновь добавляемые значения будут 
* добавлены после более ранних, это хоть и может способствовать сокращению издержек при сортировке результирующих строк, через 
* ORDER BY, и даже чаще всего движек СУБД возвращает данные в порядке сортировки кластеризованного индекса, однако всё равно нет 
* никакой 100% гарантии, что в сложном запросе, на большой таблице, в реальной жизни, при большой конкурентности запросов, оптимизатор
* не выберет другой порядок и вы не получите записи в другом порядке.
* 
* То же самое касается и наличия в таблице первичного индекса любого вида, хотя в большей части случаев оптимизатор выберет путь 
* приводящий к возврату результата упорядоченого в соответствии с ним, нет никакой 100% гарантии, что он сделает это на одном и том же 
* запросе при любых возможных условиях в любой другой момент времени. Единственный путь это гарантировать -- указать явно оптимизатору 
* запроса, что результирующий набор данных нужно отсортировать в соответствии со значениями полей перечисленных в предложении ORDER BY.
* 
* При наличии искусственного целочисленного автоинкрементируемого первичного ключа, поскольку его значения автоматически, и монотонно, 
* увеличиваются в процессе добавления новых записей, если конечно искусствено не вмешаться в процесс, добавив его к предложению 
* ORDER BY, помимо полей даты и идентификатора объекта, можно быть уверенным, что записи будут возвращены в порядке их создания если
* их несколько для одного объекта на одну дату. То, что они будут возвращены в порядке создания, косвенно вытекает из того факта, что
* большее значение автоинкрементного ключа имеет запись созданная позже по времени, если не было ручного вмешательства в этот процесс, 
* со стороны клиента.
* 
* Другой вариант избежать этой проблемы увеличить гранулярность значений поле хранения даты, до миллисекунд или микросекунд, так что бы 
* с запасом перекрывалась возможная частота вставки новых данных в эту таблицу, тогда по этому полю можно сортировать непосредственно
* и вероятность коллизии и неоднозначного поведения будет пренебрежимо малой. Но клиенту приедется при выборке нормализовывать значение 
* уменьшая гранулярность до даты. Либо иметь дополнительное поле в таблице со отметкой времени с такой гранулярностью, которое будет 
* явно выставлятся триггером в текущий момент времени при вставке записи, но это может иметь негативное влияение на производительность
* при высокочастотных вставках.
* 
* Я предпочту в данном случае использовать автоинкрементное целочисленное поле с искусственным первичным ключем, так как предполагаемая
* частота вставки значений низкая, реализация поведения переносима на другую СУБД, а его наличие вносит помимо однозначности 
* сортировки, уменьшает требования на пост-обработку данных клиентом, удобство в управление записями таблицы, так как его значение 
* может использоваться как "закладка" или однозначный указатель на экземпляр записи, например при редактировании записи через 
* GUI-клиента. Проще говоря при его наличии мы можем рассматривать таблицу именно как однозначно упорядоченное множество записей.
*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

необходимо:

1. написать скрипты для создания таблиц для хранения этих обьектов

2. написать скрипты для генерации тестовых данных

3. Написать запрос(оптимальный по производительности), выводящий непрерывные интервалы(историю) состояний предоставления услуги. Интервалы должны 
быть ограничены календарным годом, в результате запроса должны быть определены столбцы

а) [идентификатор ТУ]

б) [дата начала интервала]

в) [дата окончания интервала]

г) [коэф.активности] с учетом активностей ТУ и сети (0 или 1)

примерный вид результирующего запроса для каждой точки учета:

ТУ1 дата_начала1 дата_конца1 коэф_активностии1

ТУ1 дата_начала2 дата_конца2 коэф_активностии2

ТУ1 дата_начала3 дата_конца3 коэф_активностии3

...

в интервалах дат не должно быть пропусков на интервале года (дата_конца1 = дата_начала2) и т.д

*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* Противоречит вышеприведенному условию "Интервалы должны быть ограничены календарным годом", т.к. если соблюдать условие 
* "(дата_конца1 = дата_начала2)" один из интервалов всегда будет оканчиваться на 01.01 следующего года или начинаться с 31.12 
* предыдущего года. Соответственно реализовано так что, "дата_конца1 = (дата_начала2 - 1 день)", т.е. идут встык.
*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

идущие подряд активности должны иметь разное значения (не повторяться)